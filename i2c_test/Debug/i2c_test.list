
i2c_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e54  08002e54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e54  08002e54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e54  08002e54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002e68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002e68  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006668  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014cc  00000000  00000000  000266e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00027bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000582  00000000  00000000  000282e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010a3  00000000  00000000  00028862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093d1  00000000  00000000  00029905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e5d4  00000000  00000000  00032cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cb4  00000000  00000000  000b12ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000b2f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e10 	.word	0x08002e10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e10 	.word	0x08002e10

0800014c <HAL_I2C_ListenCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a04      	ldr	r2, [pc, #16]	; (800016c <HAL_I2C_ListenCpltCallback+0x20>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d100      	bne.n	8000160 <HAL_I2C_ListenCpltCallback+0x14>
		__NOP();
 800015e:	bf00      	nop
//		HAL_I2C_Slave_Receive(hi2c1, pData, Size, Timeout)
	}
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	40005400 	.word	0x40005400

08000170 <HAL_I2C_AddrCallback>:
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	70fb      	strb	r3, [r7, #3]
 800017c:	4613      	mov	r3, r2
 800017e:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance == I2C1){
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <HAL_I2C_AddrCallback+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d100      	bne.n	800018c <HAL_I2C_AddrCallback+0x1c>
		__NOP();
 800018a:	bf00      	nop
	}
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	40005400 	.word	0x40005400

0800019c <HAL_I2C_SlaveRxCpltCallback>:

HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]

}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f000 f978 	bl	80004a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f80e 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001bc:	f000 f876 	bl	80002ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c0:	f000 f846 	bl	8000250 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while(HAL_I2C_EnableListen_IT(&hi2c1)!= HAL_OK);
 80001c4:	bf00      	nop
 80001c6:	4803      	ldr	r0, [pc, #12]	; (80001d4 <main+0x24>)
 80001c8:	f000 fe40 	bl	8000e4c <HAL_I2C_EnableListen_IT>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d1f9      	bne.n	80001c6 <main+0x16>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d2:	e7fe      	b.n	80001d2 <main+0x22>
 80001d4:	20000028 	.word	0x20000028

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	; 0x40
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fde6 	bl	8002db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fa:	2302      	movs	r3, #2
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000202:	2310      	movs	r3, #16
 8000204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000206:	2300      	movs	r3, #0
 8000208:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	4618      	mov	r0, r3
 8000210:	f002 f9d6 	bl	80025c0 <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800021a:	f000 f869 	bl	80002f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000222:	2300      	movs	r3, #0
 8000224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fc44 	bl	8002ac4 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000242:	f000 f855 	bl	80002f0 <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3740      	adds	r7, #64	; 0x40
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000256:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <MX_I2C1_Init+0x54>)
 8000258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <MX_I2C1_Init+0x50>)
 800025c:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <MX_I2C1_Init+0x58>)
 800025e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 46;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000268:	222e      	movs	r2, #46	; 0x2e
 800026a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <MX_I2C1_Init+0x50>)
 800026e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <MX_I2C1_Init+0x50>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <MX_I2C1_Init+0x50>)
 800028e:	f000 fc85 	bl	8000b9c <HAL_I2C_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000298:	f000 f82a 	bl	80002f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000028 	.word	0x20000028
 80002a4:	40005400 	.word	0x40005400
 80002a8:	000186a0 	.word	0x000186a0

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <MX_GPIO_Init+0x40>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <MX_GPIO_Init+0x40>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_GPIO_Init+0x40>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0304 	and.w	r3, r3, #4
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_GPIO_Init+0x40>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a07      	ldr	r2, [pc, #28]	; (80002ec <MX_GPIO_Init+0x40>)
 80002d0:	f043 0308 	orr.w	r3, r3, #8
 80002d4:	6193      	str	r3, [r2, #24]
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <MX_GPIO_Init+0x40>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f003 0308 	and.w	r3, r3, #8
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f4:	b672      	cpsid	i
}
 80002f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <Error_Handler+0x8>
	...

080002fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	4a14      	ldr	r2, [pc, #80]	; (8000358 <HAL_MspInit+0x5c>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6193      	str	r3, [r2, #24]
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <HAL_MspInit+0x5c>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <HAL_MspInit+0x5c>)
 8000320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000324:	61d3      	str	r3, [r2, #28]
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <HAL_MspInit+0x5c>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <HAL_MspInit+0x60>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <HAL_MspInit+0x60>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034e:	bf00      	nop
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000
 800035c:	40010000 	.word	0x40010000

08000360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a19      	ldr	r2, [pc, #100]	; (80003e0 <HAL_I2C_MspInit+0x80>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d12b      	bne.n	80003d8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <HAL_I2C_MspInit+0x84>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <HAL_I2C_MspInit+0x84>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <HAL_I2C_MspInit+0x84>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000398:	23c0      	movs	r3, #192	; 0xc0
 800039a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800039c:	2312      	movs	r3, #18
 800039e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a0:	2303      	movs	r3, #3
 80003a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	480f      	ldr	r0, [pc, #60]	; (80003e8 <HAL_I2C_MspInit+0x88>)
 80003ac:	f000 fa72 	bl	8000894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <HAL_I2C_MspInit+0x84>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <HAL_I2C_MspInit+0x84>)
 80003b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003ba:	61d3      	str	r3, [r2, #28]
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <HAL_I2C_MspInit+0x84>)
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	201f      	movs	r0, #31
 80003ce:	f000 f9a4 	bl	800071a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80003d2:	201f      	movs	r0, #31
 80003d4:	f000 f9bd 	bl	8000752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003d8:	bf00      	nop
 80003da:	3720      	adds	r7, #32
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40005400 	.word	0x40005400
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010c00 	.word	0x40010c00

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f0:	e7fe      	b.n	80003f0 <NMI_Handler+0x4>

080003f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <MemManage_Handler+0x4>

080003fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <UsageFault_Handler+0x4>

0800040a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr

08000416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr

08000422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr

0800042e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000432:	f000 f87f 	bl	8000534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <I2C1_EV_IRQHandler+0x10>)
 8000442:	f000 fd38 	bl	8000eb6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000028 	.word	0x20000028

08000450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800045c:	f7ff fff8 	bl	8000450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480b      	ldr	r0, [pc, #44]	; (8000490 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000462:	490c      	ldr	r1, [pc, #48]	; (8000494 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000464:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a09      	ldr	r2, [pc, #36]	; (800049c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000478:	4c09      	ldr	r4, [pc, #36]	; (80004a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000486:	f002 fc9f 	bl	8002dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048a:	f7ff fe91 	bl	80001b0 <main>
  bx lr
 800048e:	4770      	bx	lr
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000498:	08002e5c 	.word	0x08002e5c
  ldr r2, =_sbss
 800049c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004a0:	20000080 	.word	0x20000080

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_Init+0x28>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <HAL_Init+0x28>)
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 f923 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004be:	200f      	movs	r0, #15
 80004c0:	f000 f808 	bl	80004d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004c4:	f7ff ff1a 	bl	80002fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40022000 	.word	0x40022000

080004d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_InitTick+0x54>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_InitTick+0x58>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	4619      	mov	r1, r3
 80004e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f93b 	bl	800076e <HAL_SYSTICK_Config>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004fe:	2301      	movs	r3, #1
 8000500:	e00e      	b.n	8000520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b0f      	cmp	r3, #15
 8000506:	d80a      	bhi.n	800051e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	2200      	movs	r2, #0
 800050a:	6879      	ldr	r1, [r7, #4]
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f000 f903 	bl	800071a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <HAL_InitTick+0x5c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	e000      	b.n	8000520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000000 	.word	0x20000000
 800052c:	20000008 	.word	0x20000008
 8000530:	20000004 	.word	0x20000004

08000534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_IncTick+0x1c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_IncTick+0x20>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x20>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	20000008 	.word	0x20000008
 8000554:	2000007c 	.word	0x2000007c

08000558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  return uwTick;
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <HAL_GetTick+0x10>)
 800055e:	681b      	ldr	r3, [r3, #0]
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	2000007c 	.word	0x2000007c

0800056c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f003 0307 	and.w	r3, r3, #7
 800057a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	60d3      	str	r3, [r2, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <__NVIC_GetPriorityGrouping+0x18>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	f003 0307 	and.w	r3, r3, #7
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db0b      	blt.n	80005fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 021f 	and.w	r2, r3, #31
 80005e8:	4906      	ldr	r1, [pc, #24]	; (8000604 <__NVIC_EnableIRQ+0x34>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	2001      	movs	r0, #1
 80005f2:	fa00 f202 	lsl.w	r2, r0, r2
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	e000e100 	.word	0xe000e100

08000608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0a      	blt.n	8000632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	b2da      	uxtb	r2, r3
 8000620:	490c      	ldr	r1, [pc, #48]	; (8000654 <__NVIC_SetPriority+0x4c>)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	440b      	add	r3, r1
 800062c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000630:	e00a      	b.n	8000648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4908      	ldr	r1, [pc, #32]	; (8000658 <__NVIC_SetPriority+0x50>)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	3b04      	subs	r3, #4
 8000640:	0112      	lsls	r2, r2, #4
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	440b      	add	r3, r1
 8000646:	761a      	strb	r2, [r3, #24]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	f1c3 0307 	rsb	r3, r3, #7
 8000676:	2b04      	cmp	r3, #4
 8000678:	bf28      	it	cs
 800067a:	2304      	movcs	r3, #4
 800067c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3304      	adds	r3, #4
 8000682:	2b06      	cmp	r3, #6
 8000684:	d902      	bls.n	800068c <NVIC_EncodePriority+0x30>
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3b03      	subs	r3, #3
 800068a:	e000      	b.n	800068e <NVIC_EncodePriority+0x32>
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	f04f 32ff 	mov.w	r2, #4294967295
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43da      	mvns	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	401a      	ands	r2, r3
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	f04f 31ff 	mov.w	r1, #4294967295
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43d9      	mvns	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	4313      	orrs	r3, r2
         );
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3724      	adds	r7, #36	; 0x24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006d0:	d301      	bcc.n	80006d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2301      	movs	r3, #1
 80006d4:	e00f      	b.n	80006f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <SysTick_Config+0x40>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3b01      	subs	r3, #1
 80006dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006de:	210f      	movs	r1, #15
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f7ff ff90 	bl	8000608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <SysTick_Config+0x40>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <SysTick_Config+0x40>)
 80006f0:	2207      	movs	r2, #7
 80006f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000e010 	.word	0xe000e010

08000704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ff2d 	bl	800056c <__NVIC_SetPriorityGrouping>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800071a:	b580      	push	{r7, lr}
 800071c:	b086      	sub	sp, #24
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072c:	f7ff ff42 	bl	80005b4 <__NVIC_GetPriorityGrouping>
 8000730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	6978      	ldr	r0, [r7, #20]
 8000738:	f7ff ff90 	bl	800065c <NVIC_EncodePriority>
 800073c:	4602      	mov	r2, r0
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5f 	bl	8000608 <__NVIC_SetPriority>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff35 	bl	80005d0 <__NVIC_EnableIRQ>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ffa2 	bl	80006c0 <SysTick_Config>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b02      	cmp	r3, #2
 800079e:	d005      	beq.n	80007ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2204      	movs	r2, #4
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	e051      	b.n	8000850 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f022 020e 	bic.w	r2, r2, #14
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f022 0201 	bic.w	r2, r2, #1
 80007ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <HAL_DMA_Abort_IT+0xd4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d029      	beq.n	800082a <HAL_DMA_Abort_IT+0xa2>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a21      	ldr	r2, [pc, #132]	; (8000860 <HAL_DMA_Abort_IT+0xd8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d022      	beq.n	8000826 <HAL_DMA_Abort_IT+0x9e>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <HAL_DMA_Abort_IT+0xdc>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d01a      	beq.n	8000820 <HAL_DMA_Abort_IT+0x98>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <HAL_DMA_Abort_IT+0xe0>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d012      	beq.n	800081a <HAL_DMA_Abort_IT+0x92>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <HAL_DMA_Abort_IT+0xe4>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d00a      	beq.n	8000814 <HAL_DMA_Abort_IT+0x8c>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <HAL_DMA_Abort_IT+0xe8>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d102      	bne.n	800080e <HAL_DMA_Abort_IT+0x86>
 8000808:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800080c:	e00e      	b.n	800082c <HAL_DMA_Abort_IT+0xa4>
 800080e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000812:	e00b      	b.n	800082c <HAL_DMA_Abort_IT+0xa4>
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	e008      	b.n	800082c <HAL_DMA_Abort_IT+0xa4>
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	e005      	b.n	800082c <HAL_DMA_Abort_IT+0xa4>
 8000820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000824:	e002      	b.n	800082c <HAL_DMA_Abort_IT+0xa4>
 8000826:	2310      	movs	r3, #16
 8000828:	e000      	b.n	800082c <HAL_DMA_Abort_IT+0xa4>
 800082a:	2301      	movs	r3, #1
 800082c:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_DMA_Abort_IT+0xec>)
 800082e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2201      	movs	r2, #1
 8000834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000844:	2b00      	cmp	r3, #0
 8000846:	d003      	beq.n	8000850 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	4798      	blx	r3
    } 
  }
  return status;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40020008 	.word	0x40020008
 8000860:	4002001c 	.word	0x4002001c
 8000864:	40020030 	.word	0x40020030
 8000868:	40020044 	.word	0x40020044
 800086c:	40020058 	.word	0x40020058
 8000870:	4002006c 	.word	0x4002006c
 8000874:	40020000 	.word	0x40020000

08000878 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000886:	b2db      	uxtb	r3, r3
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	e169      	b.n	8000b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008a8:	2201      	movs	r2, #1
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	4013      	ands	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f040 8158 	bne.w	8000b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4a9a      	ldr	r2, [pc, #616]	; (8000b34 <HAL_GPIO_Init+0x2a0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d05e      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008d0:	4a98      	ldr	r2, [pc, #608]	; (8000b34 <HAL_GPIO_Init+0x2a0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d875      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008d6:	4a98      	ldr	r2, [pc, #608]	; (8000b38 <HAL_GPIO_Init+0x2a4>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d058      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008dc:	4a96      	ldr	r2, [pc, #600]	; (8000b38 <HAL_GPIO_Init+0x2a4>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d86f      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008e2:	4a96      	ldr	r2, [pc, #600]	; (8000b3c <HAL_GPIO_Init+0x2a8>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d052      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008e8:	4a94      	ldr	r2, [pc, #592]	; (8000b3c <HAL_GPIO_Init+0x2a8>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d869      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008ee:	4a94      	ldr	r2, [pc, #592]	; (8000b40 <HAL_GPIO_Init+0x2ac>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d04c      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 80008f4:	4a92      	ldr	r2, [pc, #584]	; (8000b40 <HAL_GPIO_Init+0x2ac>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d863      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 80008fa:	4a92      	ldr	r2, [pc, #584]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d046      	beq.n	800098e <HAL_GPIO_Init+0xfa>
 8000900:	4a90      	ldr	r2, [pc, #576]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d85d      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 8000906:	2b12      	cmp	r3, #18
 8000908:	d82a      	bhi.n	8000960 <HAL_GPIO_Init+0xcc>
 800090a:	2b12      	cmp	r3, #18
 800090c:	d859      	bhi.n	80009c2 <HAL_GPIO_Init+0x12e>
 800090e:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <HAL_GPIO_Init+0x80>)
 8000910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000914:	0800098f 	.word	0x0800098f
 8000918:	08000969 	.word	0x08000969
 800091c:	0800097b 	.word	0x0800097b
 8000920:	080009bd 	.word	0x080009bd
 8000924:	080009c3 	.word	0x080009c3
 8000928:	080009c3 	.word	0x080009c3
 800092c:	080009c3 	.word	0x080009c3
 8000930:	080009c3 	.word	0x080009c3
 8000934:	080009c3 	.word	0x080009c3
 8000938:	080009c3 	.word	0x080009c3
 800093c:	080009c3 	.word	0x080009c3
 8000940:	080009c3 	.word	0x080009c3
 8000944:	080009c3 	.word	0x080009c3
 8000948:	080009c3 	.word	0x080009c3
 800094c:	080009c3 	.word	0x080009c3
 8000950:	080009c3 	.word	0x080009c3
 8000954:	080009c3 	.word	0x080009c3
 8000958:	08000971 	.word	0x08000971
 800095c:	08000985 	.word	0x08000985
 8000960:	4a79      	ldr	r2, [pc, #484]	; (8000b48 <HAL_GPIO_Init+0x2b4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000966:	e02c      	b.n	80009c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e029      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	3304      	adds	r3, #4
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e024      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	3308      	adds	r3, #8
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e01f      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	330c      	adds	r3, #12
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e01a      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d102      	bne.n	800099c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000996:	2304      	movs	r3, #4
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e013      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a4:	2308      	movs	r3, #8
 80009a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	611a      	str	r2, [r3, #16]
          break;
 80009ae:	e009      	b.n	80009c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b0:	2308      	movs	r3, #8
 80009b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	615a      	str	r2, [r3, #20]
          break;
 80009ba:	e003      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	e000      	b.n	80009c4 <HAL_GPIO_Init+0x130>
          break;
 80009c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d801      	bhi.n	80009ce <HAL_GPIO_Init+0x13a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	e001      	b.n	80009d2 <HAL_GPIO_Init+0x13e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3304      	adds	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	2bff      	cmp	r3, #255	; 0xff
 80009d8:	d802      	bhi.n	80009e0 <HAL_GPIO_Init+0x14c>
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	e002      	b.n	80009e6 <HAL_GPIO_Init+0x152>
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	3b08      	subs	r3, #8
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	210f      	movs	r1, #15
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	401a      	ands	r2, r3
 80009f8:	6a39      	ldr	r1, [r7, #32]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	431a      	orrs	r2, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 80b1 	beq.w	8000b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a14:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <HAL_GPIO_Init+0x2b8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a4c      	ldr	r2, [pc, #304]	; (8000b4c <HAL_GPIO_Init+0x2b8>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b4a      	ldr	r3, [pc, #296]	; (8000b4c <HAL_GPIO_Init+0x2b8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a2c:	4a48      	ldr	r2, [pc, #288]	; (8000b50 <HAL_GPIO_Init+0x2bc>)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	220f      	movs	r2, #15
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a40      	ldr	r2, [pc, #256]	; (8000b54 <HAL_GPIO_Init+0x2c0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d013      	beq.n	8000a80 <HAL_GPIO_Init+0x1ec>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a3f      	ldr	r2, [pc, #252]	; (8000b58 <HAL_GPIO_Init+0x2c4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d00d      	beq.n	8000a7c <HAL_GPIO_Init+0x1e8>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <HAL_GPIO_Init+0x2c8>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d007      	beq.n	8000a78 <HAL_GPIO_Init+0x1e4>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a3d      	ldr	r2, [pc, #244]	; (8000b60 <HAL_GPIO_Init+0x2cc>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d101      	bne.n	8000a74 <HAL_GPIO_Init+0x1e0>
 8000a70:	2303      	movs	r3, #3
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a74:	2304      	movs	r3, #4
 8000a76:	e004      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a78:	2302      	movs	r3, #2
 8000a7a:	e002      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a80:	2300      	movs	r3, #0
 8000a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a84:	f002 0203 	and.w	r2, r2, #3
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	4093      	lsls	r3, r2
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a92:	492f      	ldr	r1, [pc, #188]	; (8000b50 <HAL_GPIO_Init+0x2bc>)
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3302      	adds	r3, #2
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aac:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	492c      	ldr	r1, [pc, #176]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	608b      	str	r3, [r1, #8]
 8000ab8:	e006      	b.n	8000ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4928      	ldr	r1, [pc, #160]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	4922      	ldr	r1, [pc, #136]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60cb      	str	r3, [r1, #12]
 8000ae0:	e006      	b.n	8000af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	491e      	ldr	r1, [pc, #120]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d006      	beq.n	8000b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	4918      	ldr	r1, [pc, #96]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	604b      	str	r3, [r1, #4]
 8000b08:	e006      	b.n	8000b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	4914      	ldr	r1, [pc, #80]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d021      	beq.n	8000b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	490e      	ldr	r1, [pc, #56]	; (8000b64 <HAL_GPIO_Init+0x2d0>)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	600b      	str	r3, [r1, #0]
 8000b30:	e021      	b.n	8000b76 <HAL_GPIO_Init+0x2e2>
 8000b32:	bf00      	nop
 8000b34:	10320000 	.word	0x10320000
 8000b38:	10310000 	.word	0x10310000
 8000b3c:	10220000 	.word	0x10220000
 8000b40:	10210000 	.word	0x10210000
 8000b44:	10120000 	.word	0x10120000
 8000b48:	10110000 	.word	0x10110000
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40010c00 	.word	0x40010c00
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	40011400 	.word	0x40011400
 8000b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	4909      	ldr	r1, [pc, #36]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	3301      	adds	r3, #1
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	fa22 f303 	lsr.w	r3, r2, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f47f ae8e 	bne.w	80008a8 <HAL_GPIO_Init+0x14>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	372c      	adds	r7, #44	; 0x2c
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	40010400 	.word	0x40010400

08000b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e12b      	b.n	8000e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d106      	bne.n	8000bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fbcc 	bl	8000360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2224      	movs	r2, #36	; 0x24
 8000bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0201 	bic.w	r2, r2, #1
 8000bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c00:	f002 f8a8 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8000c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4a81      	ldr	r2, [pc, #516]	; (8000e10 <HAL_I2C_Init+0x274>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d807      	bhi.n	8000c20 <HAL_I2C_Init+0x84>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4a80      	ldr	r2, [pc, #512]	; (8000e14 <HAL_I2C_Init+0x278>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	bf94      	ite	ls
 8000c18:	2301      	movls	r3, #1
 8000c1a:	2300      	movhi	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	e006      	b.n	8000c2e <HAL_I2C_Init+0x92>
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4a7d      	ldr	r2, [pc, #500]	; (8000e18 <HAL_I2C_Init+0x27c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	bf94      	ite	ls
 8000c28:	2301      	movls	r3, #1
 8000c2a:	2300      	movhi	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e0e7      	b.n	8000e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4a78      	ldr	r2, [pc, #480]	; (8000e1c <HAL_I2C_Init+0x280>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	0c9b      	lsrs	r3, r3, #18
 8000c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	4a6a      	ldr	r2, [pc, #424]	; (8000e10 <HAL_I2C_Init+0x274>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d802      	bhi.n	8000c70 <HAL_I2C_Init+0xd4>
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	e009      	b.n	8000c84 <HAL_I2C_Init+0xe8>
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c76:	fb02 f303 	mul.w	r3, r2, r3
 8000c7a:	4a69      	ldr	r2, [pc, #420]	; (8000e20 <HAL_I2C_Init+0x284>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	099b      	lsrs	r3, r3, #6
 8000c82:	3301      	adds	r3, #1
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	495c      	ldr	r1, [pc, #368]	; (8000e10 <HAL_I2C_Init+0x274>)
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d819      	bhi.n	8000cd8 <HAL_I2C_Init+0x13c>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	1e59      	subs	r1, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb2:	1c59      	adds	r1, r3, #1
 8000cb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000cb8:	400b      	ands	r3, r1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00a      	beq.n	8000cd4 <HAL_I2C_Init+0x138>
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	1e59      	subs	r1, r3, #1
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd2:	e051      	b.n	8000d78 <HAL_I2C_Init+0x1dc>
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	e04f      	b.n	8000d78 <HAL_I2C_Init+0x1dc>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d111      	bne.n	8000d04 <HAL_I2C_Init+0x168>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	1e58      	subs	r0, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6859      	ldr	r1, [r3, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	440b      	add	r3, r1
 8000cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf0c      	ite	eq
 8000cfc:	2301      	moveq	r3, #1
 8000cfe:	2300      	movne	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	e012      	b.n	8000d2a <HAL_I2C_Init+0x18e>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1e58      	subs	r0, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6859      	ldr	r1, [r3, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	0099      	lsls	r1, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_I2C_Init+0x196>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e022      	b.n	8000d78 <HAL_I2C_Init+0x1dc>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <HAL_I2C_Init+0x1bc>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1e58      	subs	r0, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6859      	ldr	r1, [r3, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	440b      	add	r3, r1
 8000d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d56:	e00f      	b.n	8000d78 <HAL_I2C_Init+0x1dc>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	1e58      	subs	r0, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6859      	ldr	r1, [r3, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	0099      	lsls	r1, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	6809      	ldr	r1, [r1, #0]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69da      	ldr	r2, [r3, #28]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6911      	ldr	r1, [r2, #16]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68d2      	ldr	r2, [r2, #12]
 8000db2:	4311      	orrs	r1, r2
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	430b      	orrs	r3, r1
 8000dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2220      	movs	r2, #32
 8000df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	000186a0 	.word	0x000186a0
 8000e14:	001e847f 	.word	0x001e847f
 8000e18:	003d08ff 	.word	0x003d08ff
 8000e1c:	431bde83 	.word	0x431bde83
 8000e20:	10624dd3 	.word	0x10624dd3

08000e24 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	2b80      	cmp	r3, #128	; 0x80
 8000e38:	d103      	bne.n	8000e42 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b20      	cmp	r3, #32
 8000e5e:	d124      	bne.n	8000eaa <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2228      	movs	r2, #40	; 0x28
 8000e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d007      	beq.n	8000e86 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0201 	orr.w	r2, r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e94:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000ea4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8000eaa:	2302      	movs	r3, #2
  }
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b088      	sub	sp, #32
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000ed6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ede:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b10      	cmp	r3, #16
 8000ee4:	d003      	beq.n	8000eee <HAL_I2C_EV_IRQHandler+0x38>
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	2b40      	cmp	r3, #64	; 0x40
 8000eea:	f040 80b1 	bne.w	8001050 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10d      	bne.n	8000f24 <HAL_I2C_EV_IRQHandler+0x6e>
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8000f0e:	d003      	beq.n	8000f18 <HAL_I2C_EV_IRQHandler+0x62>
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8000f16:	d101      	bne.n	8000f1c <HAL_I2C_EV_IRQHandler+0x66>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <HAL_I2C_EV_IRQHandler+0x68>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f000 8114 	beq.w	800114c <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_I2C_EV_IRQHandler+0x90>
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f001 fb27 	bl	800258c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fc9a 	bl	8001878 <I2C_Master_SB>
 8000f44:	e083      	b.n	800104e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d008      	beq.n	8000f62 <HAL_I2C_EV_IRQHandler+0xac>
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fd11 	bl	8001982 <I2C_Master_ADD10>
 8000f60:	e075      	b.n	800104e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <HAL_I2C_EV_IRQHandler+0xc8>
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fd2c 	bl	80019d4 <I2C_Master_ADDR>
 8000f7c:	e067      	b.n	800104e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d036      	beq.n	8000ff6 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f96:	f000 80db 	beq.w	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00d      	beq.n	8000fc0 <HAL_I2C_EV_IRQHandler+0x10a>
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d008      	beq.n	8000fc0 <HAL_I2C_EV_IRQHandler+0x10a>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d103      	bne.n	8000fc0 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f90e 	bl	80011da <I2C_MasterTransmit_TXE>
 8000fbe:	e046      	b.n	800104e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80c2 	beq.w	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80bc 	beq.w	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	2b21      	cmp	r3, #33	; 0x21
 8000fdc:	d103      	bne.n	8000fe6 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f997 	bl	8001312 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000fe4:	e0b4      	b.n	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b40      	cmp	r3, #64	; 0x40
 8000fea:	f040 80b1 	bne.w	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fa05 	bl	80013fe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000ff4:	e0ac      	b.n	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001004:	f000 80a4 	beq.w	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00d      	beq.n	800102e <HAL_I2C_EV_IRQHandler+0x178>
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <HAL_I2C_EV_IRQHandler+0x178>
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fa81 	bl	800152e <I2C_MasterReceive_RXNE>
 800102c:	e00f      	b.n	800104e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 808b 	beq.w	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 8085 	beq.w	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fb2c 	bl	80016a4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800104c:	e080      	b.n	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
 800104e:	e07f      	b.n	8001150 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	e007      	b.n	8001072 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d011      	beq.n	80010a0 <HAL_I2C_EV_IRQHandler+0x1ea>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00c      	beq.n	80010a0 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fef2 	bl	8001e82 <I2C_Slave_ADDR>
 800109e:	e05a      	b.n	8001156 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d008      	beq.n	80010bc <HAL_I2C_EV_IRQHandler+0x206>
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 ff2d 	bl	8001f14 <I2C_Slave_STOPF>
 80010ba:	e04c      	b.n	8001156 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	2b21      	cmp	r3, #33	; 0x21
 80010c0:	d002      	beq.n	80010c8 <HAL_I2C_EV_IRQHandler+0x212>
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2b29      	cmp	r3, #41	; 0x29
 80010c6:	d120      	bne.n	800110a <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00d      	beq.n	80010ee <HAL_I2C_EV_IRQHandler+0x238>
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <HAL_I2C_EV_IRQHandler+0x238>
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 fe0f 	bl	8001d0a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80010ec:	e032      	b.n	8001154 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02d      	beq.n	8001154 <HAL_I2C_EV_IRQHandler+0x29e>
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d028      	beq.n	8001154 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fe3e 	bl	8001d84 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001108:	e024      	b.n	8001154 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00d      	beq.n	8001130 <HAL_I2C_EV_IRQHandler+0x27a>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <HAL_I2C_EV_IRQHandler+0x27a>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fe4b 	bl	8001dc4 <I2C_SlaveReceive_RXNE>
 800112e:	e012      	b.n	8001156 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00d      	beq.n	8001156 <HAL_I2C_EV_IRQHandler+0x2a0>
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 fe7b 	bl	8001e40 <I2C_SlaveReceive_BTF>
 800114a:	e004      	b.n	8001156 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800114c:	bf00      	nop
 800114e:	e002      	b.n	8001156 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001150:	bf00      	nop
 8001152:	e000      	b.n	8001156 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001154:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011f0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d150      	bne.n	80012a2 <I2C_MasterTransmit_TXE+0xc8>
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b21      	cmp	r3, #33	; 0x21
 8001204:	d14d      	bne.n	80012a2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b08      	cmp	r3, #8
 800120a:	d01d      	beq.n	8001248 <I2C_MasterTransmit_TXE+0x6e>
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b20      	cmp	r3, #32
 8001210:	d01a      	beq.n	8001248 <I2C_MasterTransmit_TXE+0x6e>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001218:	d016      	beq.n	8001248 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001228:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2211      	movs	r2, #17
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2220      	movs	r2, #32
 800123c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff8b 	bl	800115c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001246:	e060      	b.n	800130a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001256:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001266:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2220      	movs	r2, #32
 8001272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b40      	cmp	r3, #64	; 0x40
 8001280:	d107      	bne.n	8001292 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff81 	bl	8001192 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001290:	e03b      	b.n	800130a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff5e 	bl	800115c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80012a0:	e033      	b.n	800130a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b21      	cmp	r3, #33	; 0x21
 80012a6:	d005      	beq.n	80012b4 <I2C_MasterTransmit_TXE+0xda>
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	2b40      	cmp	r3, #64	; 0x40
 80012ac:	d12d      	bne.n	800130a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b22      	cmp	r3, #34	; 0x22
 80012b2:	d12a      	bne.n	800130a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d108      	bne.n	80012d0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80012ce:	e01c      	b.n	800130a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b40      	cmp	r3, #64	; 0x40
 80012da:	d103      	bne.n	80012e4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f88e 	bl	80013fe <I2C_MemoryTransmit_TXE_BTF>
}
 80012e2:	e012      	b.n	800130a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001308:	e7ff      	b.n	800130a <I2C_MasterTransmit_TXE+0x130>
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b21      	cmp	r3, #33	; 0x21
 800132a:	d164      	bne.n	80013f6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001330:	b29b      	uxth	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d012      	beq.n	800135c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001350:	b29b      	uxth	r3, r3
 8001352:	3b01      	subs	r3, #1
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800135a:	e04c      	b.n	80013f6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b08      	cmp	r3, #8
 8001360:	d01d      	beq.n	800139e <I2C_MasterTransmit_BTF+0x8c>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b20      	cmp	r3, #32
 8001366:	d01a      	beq.n	800139e <I2C_MasterTransmit_BTF+0x8c>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800136e:	d016      	beq.n	800139e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800137e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2211      	movs	r2, #17
 8001384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fee0 	bl	800115c <HAL_I2C_MasterTxCpltCallback>
}
 800139c:	e02b      	b.n	80013f6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80013ac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013bc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2220      	movs	r2, #32
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b40      	cmp	r3, #64	; 0x40
 80013d6:	d107      	bne.n	80013e8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fed6 	bl	8001192 <HAL_I2C_MemTxCpltCallback>
}
 80013e6:	e006      	b.n	80013f6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff feb3 	bl	800115c <HAL_I2C_MasterTxCpltCallback>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001412:	2b00      	cmp	r3, #0
 8001414:	d11d      	bne.n	8001452 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10b      	bne.n	8001436 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	b2da      	uxtb	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142e:	1c9a      	adds	r2, r3, #2
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001434:	e077      	b.n	8001526 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143a:	b29b      	uxth	r3, r3
 800143c:	121b      	asrs	r3, r3, #8
 800143e:	b2da      	uxtb	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001450:	e069      	b.n	8001526 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10b      	bne.n	8001472 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145e:	b2da      	uxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001470:	e059      	b.n	8001526 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001476:	2b02      	cmp	r3, #2
 8001478:	d152      	bne.n	8001520 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	2b22      	cmp	r3, #34	; 0x22
 800147e:	d10d      	bne.n	800149c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	651a      	str	r2, [r3, #80]	; 0x50
}
 800149a:	e044      	b.n	8001526 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d015      	beq.n	80014d2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	2b21      	cmp	r3, #33	; 0x21
 80014aa:	d112      	bne.n	80014d2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80014d0:	e029      	b.n	8001526 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d124      	bne.n	8001526 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b21      	cmp	r3, #33	; 0x21
 80014e0:	d121      	bne.n	8001526 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014f0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001500:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2220      	movs	r2, #32
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fe3a 	bl	8001192 <HAL_I2C_MemTxCpltCallback>
}
 800151e:	e002      	b.n	8001526 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fc7f 	bl	8000e24 <I2C_Flush_DR>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b22      	cmp	r3, #34	; 0x22
 8001540:	f040 80ac 	bne.w	800169c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001548:	b29b      	uxth	r3, r3
 800154a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d921      	bls.n	8001596 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	2b03      	cmp	r3, #3
 8001580:	f040 808c 	bne.w	800169c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001592:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001594:	e082      	b.n	800169c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	2b02      	cmp	r3, #2
 800159c:	d075      	beq.n	800168a <I2C_MasterReceive_RXNE+0x15c>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d002      	beq.n	80015aa <I2C_MasterReceive_RXNE+0x7c>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d16f      	bne.n	800168a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 ffbc 	bl	8002528 <I2C_WaitOnSTOPRequestThroughIT>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d142      	bne.n	800163c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80015d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b40      	cmp	r3, #64	; 0x40
 800160e:	d10a      	bne.n	8001626 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fdc0 	bl	80011a4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001624:	e03a      	b.n	800169c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2212      	movs	r2, #18
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fd9a 	bl	800116e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800163a:	e02f      	b.n	800169c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800164a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001668:	b29b      	uxth	r3, r3
 800166a:	3b01      	subs	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2220      	movs	r2, #32
 8001676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fd97 	bl	80011b6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001688:	e008      	b.n	800169c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001698:	605a      	str	r2, [r3, #4]
}
 800169a:	e7ff      	b.n	800169c <I2C_MasterReceive_RXNE+0x16e>
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d11b      	bne.n	80016f4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ca:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80016f2:	e0bd      	b.n	8001870 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d129      	bne.n	8001752 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d00a      	beq.n	800172a <I2C_MasterReceive_BTF+0x86>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d007      	beq.n	800172a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001728:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001746:	b29b      	uxth	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001750:	e08e      	b.n	8001870 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d176      	bne.n	800184a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d002      	beq.n	8001768 <I2C_MasterReceive_BTF+0xc4>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b10      	cmp	r3, #16
 8001766:	d108      	bne.n	800177a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e019      	b.n	80017ae <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b04      	cmp	r3, #4
 800177e:	d002      	beq.n	8001786 <I2C_MasterReceive_BTF+0xe2>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d108      	bne.n	8001798 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e00a      	b.n	80017ae <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b10      	cmp	r3, #16
 800179c:	d007      	beq.n	80017ae <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ac:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001808:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2220      	movs	r2, #32
 800180e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b40      	cmp	r3, #64	; 0x40
 800181c:	d10a      	bne.n	8001834 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fcb9 	bl	80011a4 <HAL_I2C_MemRxCpltCallback>
}
 8001832:	e01d      	b.n	8001870 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2212      	movs	r2, #18
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fc93 	bl	800116e <HAL_I2C_MasterRxCpltCallback>
}
 8001848:	e012      	b.n	8001870 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001866:	b29b      	uxth	r3, r3
 8001868:	3b01      	subs	r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b40      	cmp	r3, #64	; 0x40
 800188a:	d117      	bne.n	80018bc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018a4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80018a6:	e067      	b.n	8001978 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	611a      	str	r2, [r3, #16]
}
 80018ba:	e05d      	b.n	8001978 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018c4:	d133      	bne.n	800192e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b21      	cmp	r3, #33	; 0x21
 80018d0:	d109      	bne.n	80018e6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	e008      	b.n	80018f8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <I2C_Master_SB+0x92>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d108      	bne.n	800191c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	2b00      	cmp	r3, #0
 8001910:	d032      	beq.n	8001978 <I2C_Master_SB+0x100>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d02d      	beq.n	8001978 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800192a:	605a      	str	r2, [r3, #4]
}
 800192c:	e024      	b.n	8001978 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10e      	bne.n	8001954 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	b29b      	uxth	r3, r3
 800193c:	11db      	asrs	r3, r3, #7
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f003 0306 	and.w	r3, r3, #6
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f063 030f 	orn	r3, r3, #15
 800194a:	b2da      	uxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	611a      	str	r2, [r3, #16]
}
 8001952:	e011      	b.n	8001978 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10d      	bne.n	8001978 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	b29b      	uxth	r3, r3
 8001962:	11db      	asrs	r3, r3, #7
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f003 0306 	and.w	r3, r3, #6
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f063 030e 	orn	r3, r3, #14
 8001970:	b2da      	uxtb	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	611a      	str	r2, [r3, #16]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	b2da      	uxtb	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <I2C_Master_ADD10+0x26>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d108      	bne.n	80019ba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00c      	beq.n	80019ca <I2C_Master_ADD10+0x48>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019c8:	605a      	str	r2, [r3, #4]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b091      	sub	sp, #68	; 0x44
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b22      	cmp	r3, #34	; 0x22
 80019fc:	f040 8174 	bne.w	8001ce8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10f      	bne.n	8001a28 <I2C_Master_ADDR+0x54>
 8001a08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d10b      	bne.n	8001a28 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a10:	2300      	movs	r3, #0
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	e16b      	b.n	8001d00 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d11d      	bne.n	8001a6c <I2C_Master_ADDR+0x98>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a38:	d118      	bne.n	8001a6c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a5e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	651a      	str	r2, [r3, #80]	; 0x50
 8001a6a:	e149      	b.n	8001d00 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d113      	bne.n	8001a9e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e120      	b.n	8001ce0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f040 808a 	bne.w	8001bbe <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ab0:	d137      	bne.n	8001b22 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ad0:	d113      	bne.n	8001afa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	e0f2      	b.n	8001ce0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	623b      	str	r3, [r7, #32]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	623b      	str	r3, [r7, #32]
 8001b0e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e0de      	b.n	8001ce0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d02e      	beq.n	8001b86 <I2C_Master_ADDR+0x1b2>
 8001b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d02b      	beq.n	8001b86 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d102      	bne.n	8001b3a <I2C_Master_ADDR+0x166>
 8001b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d125      	bne.n	8001b86 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d00e      	beq.n	8001b5e <I2C_Master_ADDR+0x18a>
 8001b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d00b      	beq.n	8001b5e <I2C_Master_ADDR+0x18a>
 8001b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d008      	beq.n	8001b5e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e007      	b.n	8001b6e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	e0ac      	b.n	8001ce0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b94:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e090      	b.n	8001ce0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d158      	bne.n	8001c7a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d021      	beq.n	8001c12 <I2C_Master_ADDR+0x23e>
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d01e      	beq.n	8001c12 <I2C_Master_ADDR+0x23e>
 8001bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d01b      	beq.n	8001c12 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001be8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e012      	b.n	8001c38 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c20:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c46:	d14b      	bne.n	8001ce0 <I2C_Master_ADDR+0x30c>
 8001c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c4e:	d00b      	beq.n	8001c68 <I2C_Master_ADDR+0x294>
 8001c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d008      	beq.n	8001c68 <I2C_Master_ADDR+0x294>
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d005      	beq.n	8001c68 <I2C_Master_ADDR+0x294>
 8001c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d002      	beq.n	8001c68 <I2C_Master_ADDR+0x294>
 8001c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d13b      	bne.n	8001ce0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	e032      	b.n	8001ce0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c88:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c98:	d117      	bne.n	8001cca <I2C_Master_ADDR+0x2f6>
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ca0:	d00b      	beq.n	8001cba <I2C_Master_ADDR+0x2e6>
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d008      	beq.n	8001cba <I2C_Master_ADDR+0x2e6>
 8001ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d005      	beq.n	8001cba <I2C_Master_ADDR+0x2e6>
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	d002      	beq.n	8001cba <I2C_Master_ADDR+0x2e6>
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d107      	bne.n	8001cca <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001cc8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8001ce6:	e00b      	b.n	8001d00 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
}
 8001cfe:	e7ff      	b.n	8001d00 <I2C_Master_ADDR+0x32c>
 8001d00:	bf00      	nop
 8001d02:	3744      	adds	r7, #68	; 0x44
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d18:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d02b      	beq.n	8001d7c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d114      	bne.n	8001d7c <I2C_SlaveTransmit_TXE+0x72>
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b29      	cmp	r3, #41	; 0x29
 8001d56:	d111      	bne.n	8001d7c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2221      	movs	r2, #33	; 0x21
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2228      	movs	r2, #40	; 0x28
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fa02 	bl	8001180 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d011      	beq.n	8001dba <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d02c      	beq.n	8001e38 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d114      	bne.n	8001e38 <I2C_SlaveReceive_RXNE+0x74>
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b2a      	cmp	r3, #42	; 0x2a
 8001e12:	d111      	bne.n	8001e38 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e22:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2222      	movs	r2, #34	; 0x22
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2228      	movs	r2, #40	; 0x28
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe f9b2 	bl	800019c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e9c:	2b28      	cmp	r3, #40	; 0x28
 8001e9e:	d125      	bne.n	8001eec <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d103      	bne.n	8001ed0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	81bb      	strh	r3, [r7, #12]
 8001ece:	e002      	b.n	8001ed6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001ede:	89ba      	ldrh	r2, [r7, #12]
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7fe f943 	bl	8000170 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001eea:	e00e      	b.n	8001f0a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f70:	d172      	bne.n	8002058 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	2b22      	cmp	r3, #34	; 0x22
 8001f76:	d002      	beq.n	8001f7e <I2C_Slave_STOPF+0x6a>
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8001f7c:	d135      	bne.n	8001fea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f043 0204 	orr.w	r2, r3, #4
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fc5e 	bl	8000878 <HAL_DMA_GetState>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d049      	beq.n	8002056 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	4a69      	ldr	r2, [pc, #420]	; (800216c <I2C_Slave_STOPF+0x258>)
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fbda 	bl	8000788 <HAL_DMA_Abort_IT>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03d      	beq.n	8002056 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fe8:	e035      	b.n	8002056 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800201c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fc28 	bl	8000878 <HAL_DMA_GetState>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d014      	beq.n	8002058 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	4a4e      	ldr	r2, [pc, #312]	; (800216c <I2C_Slave_STOPF+0x258>)
 8002034:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fba4 	bl	8000788 <HAL_DMA_Abort_IT>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002050:	4610      	mov	r0, r2
 8002052:	4798      	blx	r3
 8002054:	e000      	b.n	8002058 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002056:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03e      	beq.n	80020e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d112      	bne.n	8002096 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a0:	2b40      	cmp	r3, #64	; 0x40
 80020a2:	d112      	bne.n	80020ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f843 	bl	8002174 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80020ee:	e039      	b.n	8002164 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b2a      	cmp	r3, #42	; 0x2a
 80020f4:	d109      	bne.n	800210a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2228      	movs	r2, #40	; 0x28
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7fe f849 	bl	800019c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b28      	cmp	r3, #40	; 0x28
 8002114:	d111      	bne.n	800213a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a15      	ldr	r2, [pc, #84]	; (8002170 <I2C_Slave_STOPF+0x25c>)
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe f80a 	bl	800014c <HAL_I2C_ListenCpltCallback>
}
 8002138:	e014      	b.n	8002164 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	2b22      	cmp	r3, #34	; 0x22
 8002140:	d002      	beq.n	8002148 <I2C_Slave_STOPF+0x234>
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b22      	cmp	r3, #34	; 0x22
 8002146:	d10d      	bne.n	8002164 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe f81c 	bl	800019c <HAL_I2C_SlaveRxCpltCallback>
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	080023d9 	.word	0x080023d9
 8002170:	ffff0000 	.word	0xffff0000

08002174 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002182:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800218a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800218c:	7bbb      	ldrb	r3, [r7, #14]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d002      	beq.n	8002198 <I2C_ITError+0x24>
 8002192:	7bbb      	ldrb	r3, [r7, #14]
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d10a      	bne.n	80021ae <I2C_ITError+0x3a>
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	2b22      	cmp	r3, #34	; 0x22
 800219c:	d107      	bne.n	80021ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021b4:	2b28      	cmp	r3, #40	; 0x28
 80021b6:	d107      	bne.n	80021c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2228      	movs	r2, #40	; 0x28
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021c6:	e015      	b.n	80021f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d6:	d00a      	beq.n	80021ee <I2C_ITError+0x7a>
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b60      	cmp	r3, #96	; 0x60
 80021dc:	d007      	beq.n	80021ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002202:	d162      	bne.n	80022ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002212:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002218:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d020      	beq.n	8002264 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	4a6a      	ldr	r2, [pc, #424]	; (80023d0 <I2C_ITError+0x25c>)
 8002228:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe faaa 	bl	8000788 <HAL_DMA_Abort_IT>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8089 	beq.w	800234e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800225e:	4610      	mov	r0, r2
 8002260:	4798      	blx	r3
 8002262:	e074      	b.n	800234e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	4a59      	ldr	r2, [pc, #356]	; (80023d0 <I2C_ITError+0x25c>)
 800226a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fa89 	bl	8000788 <HAL_DMA_Abort_IT>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d068      	beq.n	800234e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d10b      	bne.n	80022a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022c4:	4610      	mov	r0, r2
 80022c6:	4798      	blx	r3
 80022c8:	e041      	b.n	800234e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b60      	cmp	r3, #96	; 0x60
 80022d4:	d125      	bne.n	8002322 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b40      	cmp	r3, #64	; 0x40
 80022f0:	d10b      	bne.n	800230a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe ff54 	bl	80011c8 <HAL_I2C_AbortCpltCallback>
 8002320:	e015      	b.n	800234e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d10b      	bne.n	8002348 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7fe ff34 	bl	80011b6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10e      	bne.n	800237c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800236e:	2b00      	cmp	r3, #0
 8002370:	d104      	bne.n	800237c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800238a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002392:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d113      	bne.n	80023c8 <I2C_ITError+0x254>
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b28      	cmp	r3, #40	; 0x28
 80023a4:	d110      	bne.n	80023c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <I2C_ITError+0x260>)
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fd fec2 	bl	800014c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	080023d9 	.word	0x080023d9
 80023d4:	ffff0000 	.word	0xffff0000

080023d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023f2:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <I2C_DMAAbort+0x148>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	08db      	lsrs	r3, r3, #3
 80023f8:	4a4a      	ldr	r2, [pc, #296]	; (8002524 <I2C_DMAAbort+0x14c>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0a1a      	lsrs	r2, r3, #8
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00da      	lsls	r2, r3, #3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f043 0220 	orr.w	r2, r3, #32
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800241e:	e00a      	b.n	8002436 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3b01      	subs	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002434:	d0ea      	beq.n	800240c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002442:	2200      	movs	r2, #0
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002464:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2200      	movs	r2, #0
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	2200      	movs	r2, #0
 800247a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	2200      	movs	r2, #0
 800248a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b60      	cmp	r3, #96	; 0x60
 80024a6:	d10e      	bne.n	80024c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7fe fe82 	bl	80011c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024c4:	e027      	b.n	8002516 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024cc:	2b28      	cmp	r3, #40	; 0x28
 80024ce:	d117      	bne.n	8002500 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2200      	movs	r2, #0
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2228      	movs	r2, #40	; 0x28
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024fe:	e007      	b.n	8002510 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002510:	6978      	ldr	r0, [r7, #20]
 8002512:	f7fe fe50 	bl	80011b6 <HAL_I2C_ErrorCallback>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000
 8002524:	14f8b589 	.word	0x14f8b589

08002528 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	0a1a      	lsrs	r2, r3, #8
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3b01      	subs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f043 0220 	orr.w	r2, r3, #32
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e008      	b.n	8002578 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002574:	d0e9      	beq.n	800254a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000
 8002588:	14f8b589 	.word	0x14f8b589

0800258c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800259c:	d103      	bne.n	80025a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80025a4:	e007      	b.n	80025b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025ae:	d102      	bne.n	80025b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2208      	movs	r2, #8
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e272      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	4b92      	ldr	r3, [pc, #584]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d00c      	beq.n	8002606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ec:	4b8f      	ldr	r3, [pc, #572]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d112      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
 80025f8:	4b8c      	ldr	r3, [pc, #560]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002606:	4b89      	ldr	r3, [pc, #548]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d06c      	beq.n	80026ec <HAL_RCC_OscConfig+0x12c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d168      	bne.n	80026ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e24c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x76>
 8002628:	4b80      	ldr	r3, [pc, #512]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7f      	ldr	r2, [pc, #508]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e02e      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x98>
 800263e:	4b7b      	ldr	r3, [pc, #492]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7a      	ldr	r2, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b78      	ldr	r3, [pc, #480]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a77      	ldr	r2, [pc, #476]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0xbc>
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a71      	ldr	r2, [pc, #452]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 800267c:	4b6b      	ldr	r3, [pc, #428]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a6a      	ldr	r2, [pc, #424]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a67      	ldr	r2, [pc, #412]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fd ff5c 	bl	8000558 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fd ff58 	bl	8000558 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e200      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe4>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fd ff48 	bl	8000558 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fd ff44 	bl	8000558 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1ec      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x10c>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d063      	beq.n	80027c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fa:	4b4c      	ldr	r3, [pc, #304]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11c      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e1c0      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4939      	ldr	r1, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	e03a      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fd fefd 	bl	8000558 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7fd fef9 	bl	8000558 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e1a1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4927      	ldr	r1, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fd fedc 	bl	8000558 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a4:	f7fd fed8 	bl	8000558 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e180      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03a      	beq.n	8002844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d019      	beq.n	800280a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fd febc 	bl	8000558 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fd feb8 	bl	8000558 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e160      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002802:	2001      	movs	r0, #1
 8002804:	f000 faba 	bl	8002d7c <RCC_Delay>
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fd fea2 	bl	8000558 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002816:	e00f      	b.n	8002838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fd fe9e 	bl	8000558 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d908      	bls.n	8002838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e146      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	42420000 	.word	0x42420000
 8002834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e9      	bne.n	8002818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a6 	beq.w	800299e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a87      	ldr	r2, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7e      	ldr	r2, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7fd fe5f 	bl	8000558 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fd fe5b 	bl	8000558 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e103      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b75      	ldr	r3, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x312>
 80028c4:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e02d      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x334>
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a66      	ldr	r2, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	e01c      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_OscConfig+0x356>
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e00b      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6213      	str	r3, [r2, #32]
 8002922:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d015      	beq.n	8002962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7fd fe0f 	bl	8000558 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fd fe0b 	bl	8000558 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0b1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ee      	beq.n	800293e <HAL_RCC_OscConfig+0x37e>
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002962:	f7fd fdf9 	bl	8000558 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fd fdf5 	bl	8000558 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e09b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8087 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d061      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d146      	bne.n	8002a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029bc:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fd fdc9 	bl	8000558 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7fd fdc5 	bl	8000558 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e06d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4921      	ldr	r1, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a19      	ldr	r1, [r3, #32]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	430b      	orrs	r3, r1
 8002a16:	491b      	ldr	r1, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7fd fd99 	bl	8000558 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7fd fd95 	bl	8000558 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e03d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x46a>
 8002a48:	e035      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fd fd82 	bl	8000558 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fd fd7e 	bl	8000558 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e026      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x498>
 8002a76:	e01e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e019      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_OscConfig+0x500>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0d0      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	4965      	ldr	r1, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d040      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d115      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e073      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06b      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4936      	ldr	r1, [pc, #216]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7fd fcd0 	bl	8000558 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7fd fccc 	bl	8000558 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e053      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 020c 	and.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1eb      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d210      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 0207 	bic.w	r2, r3, #7
 8002bfa:	4922      	ldr	r1, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1cc>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1d0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc2e 	bl	80004d4 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	08002e28 	.word	0x08002e28
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004

08002c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x30>
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x36>
 8002cc6:	e027      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cca:	613b      	str	r3, [r7, #16]
      break;
 8002ccc:	e027      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	0c9b      	lsrs	r3, r3, #18
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	4a17      	ldr	r2, [pc, #92]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cd8:	5cd3      	ldrb	r3, [r2, r3]
 8002cda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0c5b      	lsrs	r3, r3, #17
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfa:	fb03 f202 	mul.w	r2, r3, r2
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e004      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	613b      	str	r3, [r7, #16]
      break;
 8002d16:	e002      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d1a:	613b      	str	r3, [r7, #16]
      break;
 8002d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1e:	693b      	ldr	r3, [r7, #16]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	007a1200 	.word	0x007a1200
 8002d34:	08002e40 	.word	0x08002e40
 8002d38:	08002e50 	.word	0x08002e50
 8002d3c:	003d0900 	.word	0x003d0900

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b02      	ldr	r3, [pc, #8]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	20000000 	.word	0x20000000

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff2 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	08002e38 	.word	0x08002e38

08002d7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <RCC_Delay+0x34>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <RCC_Delay+0x38>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0a5b      	lsrs	r3, r3, #9
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d98:	bf00      	nop
  }
  while (Delay --);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	60fa      	str	r2, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f9      	bne.n	8002d98 <RCC_Delay+0x1c>
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000000 	.word	0x20000000
 8002db4:	10624dd3 	.word	0x10624dd3

08002db8 <memset>:
 8002db8:	4603      	mov	r3, r0
 8002dba:	4402      	add	r2, r0
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <memset+0xa>
 8002dc0:	4770      	bx	lr
 8002dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc6:	e7f9      	b.n	8002dbc <memset+0x4>

08002dc8 <__libc_init_array>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	2600      	movs	r6, #0
 8002dcc:	4d0c      	ldr	r5, [pc, #48]	; (8002e00 <__libc_init_array+0x38>)
 8002dce:	4c0d      	ldr	r4, [pc, #52]	; (8002e04 <__libc_init_array+0x3c>)
 8002dd0:	1b64      	subs	r4, r4, r5
 8002dd2:	10a4      	asrs	r4, r4, #2
 8002dd4:	42a6      	cmp	r6, r4
 8002dd6:	d109      	bne.n	8002dec <__libc_init_array+0x24>
 8002dd8:	f000 f81a 	bl	8002e10 <_init>
 8002ddc:	2600      	movs	r6, #0
 8002dde:	4d0a      	ldr	r5, [pc, #40]	; (8002e08 <__libc_init_array+0x40>)
 8002de0:	4c0a      	ldr	r4, [pc, #40]	; (8002e0c <__libc_init_array+0x44>)
 8002de2:	1b64      	subs	r4, r4, r5
 8002de4:	10a4      	asrs	r4, r4, #2
 8002de6:	42a6      	cmp	r6, r4
 8002de8:	d105      	bne.n	8002df6 <__libc_init_array+0x2e>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df0:	4798      	blx	r3
 8002df2:	3601      	adds	r6, #1
 8002df4:	e7ee      	b.n	8002dd4 <__libc_init_array+0xc>
 8002df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfa:	4798      	blx	r3
 8002dfc:	3601      	adds	r6, #1
 8002dfe:	e7f2      	b.n	8002de6 <__libc_init_array+0x1e>
 8002e00:	08002e54 	.word	0x08002e54
 8002e04:	08002e54 	.word	0x08002e54
 8002e08:	08002e54 	.word	0x08002e54
 8002e0c:	08002e58 	.word	0x08002e58

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
